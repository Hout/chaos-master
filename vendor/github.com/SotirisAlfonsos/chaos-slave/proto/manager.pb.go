// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manager.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusResponse_Status int32

const (
	StatusResponse_SUCCESS StatusResponse_Status = 0
	StatusResponse_FAIL    StatusResponse_Status = 1
)

var StatusResponse_Status_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var StatusResponse_Status_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x StatusResponse_Status) String() string {
	return proto.EnumName(StatusResponse_Status_name, int32(x))
}

func (StatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cde9ec64f0d2c859, []int{3, 0}
}

type ServiceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceRequest) Reset()         { *m = ServiceRequest{} }
func (m *ServiceRequest) String() string { return proto.CompactTextString(m) }
func (*ServiceRequest) ProtoMessage()    {}
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cde9ec64f0d2c859, []int{0}
}

func (m *ServiceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceRequest.Unmarshal(m, b)
}
func (m *ServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceRequest.Marshal(b, m, deterministic)
}
func (m *ServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceRequest.Merge(m, src)
}
func (m *ServiceRequest) XXX_Size() int {
	return xxx_messageInfo_ServiceRequest.Size(m)
}
func (m *ServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceRequest proto.InternalMessageInfo

func (m *ServiceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type DockerRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DockerRequest) Reset()         { *m = DockerRequest{} }
func (m *DockerRequest) String() string { return proto.CompactTextString(m) }
func (*DockerRequest) ProtoMessage()    {}
func (*DockerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cde9ec64f0d2c859, []int{1}
}

func (m *DockerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DockerRequest.Unmarshal(m, b)
}
func (m *DockerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DockerRequest.Marshal(b, m, deterministic)
}
func (m *DockerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DockerRequest.Merge(m, src)
}
func (m *DockerRequest) XXX_Size() int {
	return xxx_messageInfo_DockerRequest.Size(m)
}
func (m *DockerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DockerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DockerRequest proto.InternalMessageInfo

func (m *DockerRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RecoverRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RecoverRequest) Reset()         { *m = RecoverRequest{} }
func (m *RecoverRequest) String() string { return proto.CompactTextString(m) }
func (*RecoverRequest) ProtoMessage()    {}
func (*RecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cde9ec64f0d2c859, []int{2}
}

func (m *RecoverRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RecoverRequest.Unmarshal(m, b)
}
func (m *RecoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RecoverRequest.Marshal(b, m, deterministic)
}
func (m *RecoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecoverRequest.Merge(m, src)
}
func (m *RecoverRequest) XXX_Size() int {
	return xxx_messageInfo_RecoverRequest.Size(m)
}
func (m *RecoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecoverRequest proto.InternalMessageInfo

type StatusResponse struct {
	Status               StatusResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=proto.StatusResponse_Status" json:"status,omitempty"`
	Message              string                `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cde9ec64f0d2c859, []int{3}
}

func (m *StatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusResponse.Unmarshal(m, b)
}
func (m *StatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusResponse.Marshal(b, m, deterministic)
}
func (m *StatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusResponse.Merge(m, src)
}
func (m *StatusResponse) XXX_Size() int {
	return xxx_messageInfo_StatusResponse.Size(m)
}
func (m *StatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StatusResponse proto.InternalMessageInfo

func (m *StatusResponse) GetStatus() StatusResponse_Status {
	if m != nil {
		return m.Status
	}
	return StatusResponse_SUCCESS
}

func (m *StatusResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ResolveResponse struct {
	Response             []*StatusResponse `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResolveResponse) Reset()         { *m = ResolveResponse{} }
func (m *ResolveResponse) String() string { return proto.CompactTextString(m) }
func (*ResolveResponse) ProtoMessage()    {}
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cde9ec64f0d2c859, []int{4}
}

func (m *ResolveResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResolveResponse.Unmarshal(m, b)
}
func (m *ResolveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResolveResponse.Marshal(b, m, deterministic)
}
func (m *ResolveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResolveResponse.Merge(m, src)
}
func (m *ResolveResponse) XXX_Size() int {
	return xxx_messageInfo_ResolveResponse.Size(m)
}
func (m *ResolveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResolveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResolveResponse proto.InternalMessageInfo

func (m *ResolveResponse) GetResponse() []*StatusResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.StatusResponse_Status", StatusResponse_Status_name, StatusResponse_Status_value)
	proto.RegisterType((*ServiceRequest)(nil), "proto.ServiceRequest")
	proto.RegisterType((*DockerRequest)(nil), "proto.DockerRequest")
	proto.RegisterType((*RecoverRequest)(nil), "proto.RecoverRequest")
	proto.RegisterType((*StatusResponse)(nil), "proto.StatusResponse")
	proto.RegisterType((*ResolveResponse)(nil), "proto.ResolveResponse")
}

func init() { proto.RegisterFile("manager.proto", fileDescriptor_cde9ec64f0d2c859) }

var fileDescriptor_cde9ec64f0d2c859 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0xd1, 0x4b, 0xc3, 0x30,
	0x10, 0xc6, 0xad, 0x76, 0x6d, 0xbd, 0xb1, 0x5a, 0x82, 0x4a, 0x19, 0x82, 0x52, 0x7d, 0xd8, 0xd3,
	0xc0, 0x4e, 0xc1, 0x57, 0x59, 0x15, 0x04, 0x9f, 0x1a, 0xfc, 0x03, 0x6a, 0x39, 0x86, 0x68, 0x9b,
	0x9a, 0x64, 0x05, 0x1f, 0xfd, 0xcf, 0x0d, 0x69, 0x16, 0x08, 0xcc, 0xc1, 0x9e, 0x9a, 0x3b, 0x7e,
	0xdf, 0xdd, 0xd7, 0xef, 0x60, 0xd2, 0x54, 0x6d, 0xb5, 0x42, 0x3e, 0xef, 0x38, 0x93, 0x8c, 0x8c,
	0xf4, 0x27, 0xbb, 0x81, 0x98, 0x22, 0xef, 0x3f, 0x6a, 0x2c, 0xf1, 0x7b, 0x8d, 0x42, 0x12, 0x02,
	0x7e, 0x5b, 0x35, 0x98, 0x7a, 0x57, 0xde, 0xec, 0xb8, 0xd4, 0xef, 0xec, 0x1a, 0x26, 0x05, 0xab,
	0x3f, 0x91, 0xef, 0x82, 0x12, 0x88, 0x4b, 0xac, 0x59, 0x6f, 0xa9, 0xec, 0xd7, 0x53, 0xd3, 0x65,
	0x25, 0xd7, 0xa2, 0x44, 0xd1, 0xb1, 0x56, 0x20, 0xb9, 0x83, 0x40, 0xe8, 0x8e, 0x96, 0xc6, 0xf9,
	0xc5, 0x60, 0x67, 0xee, 0x62, 0x9b, 0xd2, 0xb0, 0x24, 0x85, 0xb0, 0x41, 0x21, 0x94, 0xfd, 0xf4,
	0x50, 0x6f, 0xdc, 0x94, 0xd9, 0x25, 0x04, 0x03, 0x4b, 0xc6, 0x10, 0xd2, 0xb7, 0xe5, 0xf2, 0x89,
	0xd2, 0xe4, 0x80, 0x44, 0xe0, 0x3f, 0x3f, 0xbe, 0xbc, 0x26, 0x5e, 0x56, 0xc0, 0x89, 0x9a, 0xca,
	0xbe, 0x7a, 0xb4, 0x1e, 0x6e, 0x21, 0xe2, 0xe6, 0xad, 0x5c, 0x1c, 0xcd, 0xc6, 0xf9, 0xd9, 0x56,
	0x17, 0xa5, 0xc5, 0xf2, 0x5e, 0x0d, 0x1f, 0x62, 0x22, 0xf7, 0x30, 0x52, 0x18, 0x97, 0xc4, 0x8a,
	0x9c, 0xfc, 0xa6, 0xdb, 0x67, 0xa9, 0x1f, 0xf7, 0xa9, 0x64, 0xdd, 0x7e, 0xaa, 0x5c, 0x40, 0x30,
	0x04, 0xaf, 0xf4, 0x66, 0xed, 0xa9, 0x21, 0x9d, 0x83, 0xfc, 0xb7, 0x75, 0x61, 0xb6, 0xee, 0x23,
	0xca, 0x0b, 0x88, 0xa8, 0xe4, 0x95, 0xc4, 0xd5, 0x0f, 0x79, 0x80, 0xd0, 0x1c, 0xd5, 0x3a, 0x77,
	0x8f, 0x3c, 0x3d, 0xb7, 0x6d, 0x27, 0xe5, 0xf7, 0x40, 0xb7, 0x17, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x39, 0x8d, 0x90, 0x69, 0x78, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	Start(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Stop(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Start(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) Stop(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.Service/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	Start(context.Context, *ServiceRequest) (*StatusResponse, error)
	Stop(context.Context, *ServiceRequest) (*StatusResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) Start(ctx context.Context, req *ServiceRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedServiceServer) Stop(ctx context.Context, req *ServiceRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Start(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Service/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Stop(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Service_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Service_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

// DockerClient is the client API for Docker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DockerClient interface {
	Start(ctx context.Context, in *DockerRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Stop(ctx context.Context, in *DockerRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type dockerClient struct {
	cc *grpc.ClientConn
}

func NewDockerClient(cc *grpc.ClientConn) DockerClient {
	return &dockerClient{cc}
}

func (c *dockerClient) Start(ctx context.Context, in *DockerRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.Docker/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dockerClient) Stop(ctx context.Context, in *DockerRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/proto.Docker/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DockerServer is the server API for Docker service.
type DockerServer interface {
	Start(context.Context, *DockerRequest) (*StatusResponse, error)
	Stop(context.Context, *DockerRequest) (*StatusResponse, error)
}

// UnimplementedDockerServer can be embedded to have forward compatible implementations.
type UnimplementedDockerServer struct {
}

func (*UnimplementedDockerServer) Start(ctx context.Context, req *DockerRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedDockerServer) Stop(ctx context.Context, req *DockerRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterDockerServer(s *grpc.Server, srv DockerServer) {
	s.RegisterService(&_Docker_serviceDesc, srv)
}

func _Docker_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Docker/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).Start(ctx, req.(*DockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Docker_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DockerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Docker/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DockerServer).Stop(ctx, req.(*DockerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Docker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Docker",
	HandlerType: (*DockerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Docker_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Docker_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}

// StrategyClient is the client API for Strategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StrategyClient interface {
	Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
}

type strategyClient struct {
	cc *grpc.ClientConn
}

func NewStrategyClient(cc *grpc.ClientConn) StrategyClient {
	return &strategyClient{cc}
}

func (c *strategyClient) Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/proto.Strategy/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StrategyServer is the server API for Strategy service.
type StrategyServer interface {
	Recover(context.Context, *RecoverRequest) (*ResolveResponse, error)
}

// UnimplementedStrategyServer can be embedded to have forward compatible implementations.
type UnimplementedStrategyServer struct {
}

func (*UnimplementedStrategyServer) Recover(ctx context.Context, req *RecoverRequest) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}

func RegisterStrategyServer(s *grpc.Server, srv StrategyServer) {
	s.RegisterService(&_Strategy_serviceDesc, srv)
}

func _Strategy_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StrategyServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Strategy/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StrategyServer).Recover(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Strategy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Strategy",
	HandlerType: (*StrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recover",
			Handler:    _Strategy_Recover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager.proto",
}
